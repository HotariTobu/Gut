:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from GUT Plugin sources.
.. Generator: documentation/godot_make_rst.py.
.. _class_"addons/gut/parameter_factory.gd":

addons/gut/parameter_factory.gd
===============================

**Inherits:** `RefCounted <https://docs.godotengine.org/en/stable/classes/class_refcounted.html>`_

Creates parameter structures for parameterized tests.

.. rst-class:: classref-introduction-group

Description
-----------

There is no need for more description.

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +--------------+------------------------------------------------------------------------------------------------------------------------+
   | whatever man | :ref:`named_parameters<class_"addons/gut/parameter_factory.gd"_method_named_parameters>`\ (\ names, values\ ) |static| |
   +--------------+------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_"addons/gut/parameter_factory.gd"_method_named_parameters:

.. rst-class:: classref-method

whatever man **named_parameters**\ (\ names, values\ ) |static| :ref:`ðŸ”—<class_"addons/gut/parameter_factory.gd"_method_named_parameters>`

Creates an array of dictionaries.  It pairs up the names array with each set of values in values.  If more names than values are specified then the missing values will be filled with nulls.  If more values than names are specified those values will be ignored.  Example:

::

    create_named_parameters(['a', 'b'], [[1, 2], ['one', 'two']]) returns
       [{a:1, b:2}, {a:'one', b:'two'}]



This allows you to increase readability of your parameterized tests: 



::

    var params = create_named_parameters(['a', 'b'], [[1, 2], ['one', 'two']])
    func test_foo(p = use_parameters(params)):
       assert_eq(p.a, p.b)



Parameters:

\* names:  an array of names to be used as keys in the dictionaries \* values:  an array of arrays of values.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
.. |void| replace:: :abbr:`void (No return value.)`
